{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport iziToast from 'izitoast';\n\nimport 'flatpickr/dist/flatpickr.min.css';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst startBtn = document.querySelector('[data-start]');\nconst input = document.querySelector('#datetime-picker');\nconst daysEl = document.querySelector('[data-days]');\nconst hoursEl = document.querySelector('[data-hours]');\nconst minutesEl = document.querySelector('[data-minutes]');\nconst secondsEl = document.querySelector('[data-seconds]');\n\nlet userSelectedDate = 0;\n\nstartBtn.disabled = true;\nstartBtn.addEventListener('click', onStartTimer);\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose,\n};\n\nflatpickr(input, options);\n\nfunction onClose(selectedDates) {\n  const currentDate = Date.now();\n\n  if (selectedDates[0] < currentDate) {\n    iziToast.error({\n      title: 'Error',\n      message: 'Please choose a date in the future',\n    });\n  } else {\n    userSelectedDate = selectedDates[0];\n    startBtn.disabled = false;\n  }\n}\n\nfunction onStartTimer() {\n  startBtn.disabled = true;\n  input.disabled = true;\n\n  const intervalId = setInterval(() => {\n    const currentDate = Date.now();\n    const diff = userSelectedDate - currentDate;\n\n    updateData(convertMs(diff));\n    if (diff < 1000) {\n      input.disabled = false;\n      clearInterval(intervalId);\n    }\n  }, 1000);\n}\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = addLeadingZero(Math.floor(ms / day));\n  const hours = addLeadingZero(Math.floor((ms % day) / hour));\n  const minutes = addLeadingZero(Math.floor(((ms % day) % hour) / minute));\n  const seconds = addLeadingZero(\n    Math.floor((((ms % day) % hour) % minute) / second)\n  );\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n\nfunction updateData({ days, hours, minutes, seconds }) {\n  daysEl.textContent = days;\n  hoursEl.textContent = hours;\n  minutesEl.textContent = minutes;\n  secondsEl.textContent = seconds;\n}\n"],"names":["startBtn","input","daysEl","hoursEl","minutesEl","secondsEl","userSelectedDate","onStartTimer","options","onClose","flatpickr","selectedDates","currentDate","iziToast","intervalId","diff","updateData","convertMs","ms","days","addLeadingZero","hours","minutes","seconds","value"],"mappings":"2GAMA,MAAMA,EAAW,SAAS,cAAc,cAAc,EAChDC,EAAQ,SAAS,cAAc,kBAAkB,EACjDC,EAAS,SAAS,cAAc,aAAa,EAC7CC,EAAU,SAAS,cAAc,cAAc,EAC/CC,EAAY,SAAS,cAAc,gBAAgB,EACnDC,EAAY,SAAS,cAAc,gBAAgB,EAEzD,IAAIC,EAAmB,EAEvBN,EAAS,SAAW,GACpBA,EAAS,iBAAiB,QAASO,CAAY,EAE/C,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAAC,CACF,EAEAC,EAAUT,EAAOO,CAAO,EAExB,SAASC,EAAQE,EAAe,CAC9B,MAAMC,EAAc,KAAK,MAErBD,EAAc,GAAKC,EACrBC,EAAS,MAAM,CACb,MAAO,QACP,QAAS,oCACf,CAAK,GAEDP,EAAmBK,EAAc,GACjCX,EAAS,SAAW,GAExB,CAEA,SAASO,GAAe,CACtBP,EAAS,SAAW,GACpBC,EAAM,SAAW,GAEjB,MAAMa,EAAa,YAAY,IAAM,CACnC,MAAMF,EAAc,KAAK,MACnBG,EAAOT,EAAmBM,EAEhCI,EAAWC,EAAUF,CAAI,CAAC,EACtBA,EAAO,MACTd,EAAM,SAAW,GACjB,cAAca,CAAU,EAE3B,EAAE,GAAI,CACT,CAEA,SAASG,EAAUC,EAAI,CAMrB,MAAMC,EAAOC,EAAe,KAAK,MAAMF,EAAK,KAAG,CAAC,EAC1CG,EAAQD,EAAe,KAAK,MAAOF,EAAK,MAAO,IAAI,CAAC,EACpDI,EAAUF,EAAe,KAAK,MAAQF,EAAK,MAAO,KAAQ,GAAM,CAAC,EACjEK,EAAUH,EACd,KAAK,MAASF,EAAK,MAAO,KAAQ,IAAU,GAAM,CACtD,EAEE,MAAO,CAAE,KAAAC,EAAM,MAAAE,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASH,EAAeI,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC,CAEA,SAASR,EAAW,CAAE,KAAAG,EAAM,MAAAE,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAI,CACrDrB,EAAO,YAAciB,EACrBhB,EAAQ,YAAckB,EACtBjB,EAAU,YAAckB,EACxBjB,EAAU,YAAckB,CAC1B"}